services:
  api:
    image: rarias1082/modular-express-redis-mysql:latest
    container_name: api
    restart: unless-stopped
    env_file:
      - ./server-test/.env.docker
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    # If your Dockerfile already has a HEALTHCHECK, you can omit this.
    # Keeping it here makes health explicit in compose:
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8080/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  mysql:
    image: mysql:8.4
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: app_db
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
      MYSQL_ROOT_PASSWORD: rootpass
    volumes:
      - mysqldata:/var/lib/mysql
      - ./server-test/sql/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -prootpass"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 20s

  web:
    build:
      context: ./react-client
      args:
        # Same-origin base; Nginx in the web container proxies /api to api:8080
        VITE_API_URL: /api
        VITE_CSRF_PATH: /csrf
        VITE_REGISTER_PATH: /register
        VITE_LOGIN_PATH: /login
    container_name: web
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "8081:80"

volumes:
  redisdata:
  mysqldata:
